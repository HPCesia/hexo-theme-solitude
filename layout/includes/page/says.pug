include ../widgets/page/banner
if theme.says.enable
    #bber
        section.timeline.page-1
            if theme.says.mode === 'local'
                ul.list.waterfall
                    each item in site.data.essay.essay_list.slice(0, theme.says.strip)
                        li.item
                            if theme.says.style === 2
                                .meta
                                    img.avatar(src=theme.aside.card.author.img)
                                    .info
                                        span.bber_nick= config.author
                                        time.datetime.bber_date(datetime=moment(item.date).format())
                                    if item.content
                                        a.bber-reply.goComment(onclick=`sco.toTalk('${item.content}')`)
                                            i.solitude.fa-solid.fa-comment

                            #bber-content
                                p.datacont= item.content
                                if item.image
                                    .bber-content-img
                                        each img in item.image
                                            img(src=img alt="image")

                            if item.aplayer
                                .bber-music
                                    meting-js(server=item.aplayer.server type="song" id=item.aplayer.id mutex="true" preload="none" theme="var(--efu-main)" data-lrctype="0")

                            if item.video
                                .bber-video
                                    if item.video.player
                                        video(src=item.video.player controls="controls" style="object-fit: cover;")
                                    if item.video.bilibili
                                        iframe(src='//player.bilibili.com/player.html?autoplay=0&bvid=' + item.video.bilibili scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true")

                            if theme.says.style === 1
                                hr
                                .bber-bottom
                                    .bber-info
                                        .bber-info-time
                                            i.solitude.fa-solid.fa-calendar-day
                                            time.datetime(datetime=moment(item.date).format())
                                        if item.location
                                            .bber-info-location
                                                i.solitude.fas.fa-location-dot
                                                = item.location
                                        if item.link
                                            a.bber-content-link(href=url_for(item.link) target="_blank")
                                                i.solitude.fa-solid.fa-link
                                                = _p('essay.link')
                                    if item.content
                                        a.bber-reply(onclick=`sco.toTalk('${item.content}')`)
                                            i.solitude.fa-solid.fa-comment
                #bber-tips
                    if theme.says.strip === -1
                        = _p('essay.tip0')
                    else
                        = _p('essay.tip1').replace('{count}', theme.says.strip)
            else
                ul.list.waterfall
                script.
                    (async function () {
                        const strip = !{ theme.says.strip };
                        let url = '!{url_for(theme.says.api)}'
                        url = url.includes('?') ? '' : '?' + `pageSize=${strip === -1 ? 65535 : strip}`;
                        const baseUrl = url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
                        const response = await fetch(url);
                        const data = await response.json();
                        let items = [],
                            topitem = [],
                            essayTips = "";

                        await Promise.all(
                            data.memos.map(async (item) => {
                                const formatdata = await essayFormat(item, baseUrl);
                                if (!formatdata) return null;
                                if (item.content.includes("#top")) {
                                    topitem.push(formatdata);
                                } else {
                                    items.push(formatdata);
                                }
                                return formatdata;
                            })
                        );
                        essayTips =
                            strip === -1 || strip >= items.length
                                ? `<div id="bber-tips">- 已展开所有短文 -</div>`
                                : ((items = items.slice(0, strip)),
                                    `<div id="bber-tips">- 只展示最近 ${strip} 条短文 -</div>`);
                        document.getElementsByClassName("list")[0].innerHTML = topitem
                            .concat(items)
                            .filter((item) => item !== null)
                            .join("");
                        document.querySelector("#bber").insertAdjacentHTML("beforeend", essayTips);
                        (function wait() {
                            setTimeout(() => {
                                if (sco && utils) {
                                    sco.changeTimeFormat(document.querySelectorAll('time'));
                                    utils.lightbox(document.querySelectorAll('img'))
                                }
                                else
                                    wait()
                            }, 500);
                        })()
                    })()
                case theme.says.style
                    when 1
                        script.
                            async function essayFormat(item, baseUrl) {
                                const contentRegex = /#(.*?)\s|\n/g,
                                    imageRegex = /\!\[(.*?)\]\((.*?)\)/g,
                                    playerRegex = /{\s*player\s*(.*)\s*}/g,
                                    linkRegex = /(?<!\!)\[(.*?)\]\((.*?)\)/g,
                                    topRegex = /#top/g,
                                    fromRegex = /(?<![\w\/])(?<!\{)\{([^{}\s]+)\}(?!\})(?![\w\/])/g;
                                let time = item.displayTime
                                    content = item.content,
                                    image = "",
                                    img = content.match(imageRegex);
                                (aplayer = content.match(/{\s*music\s*(.*?)\s*(.*?)\s*}/g)),
                                    (video = content.match(playerRegex)),
                                    (link = content.match(linkRegex)),
                                    (type = ""),
                                    (from = content.match(fromRegex));

                                if (item.resources.length) {
                                    if (!img) img = [];
                                    item.resources.forEach((e) => {
                                        if (e.externalLink) img.push(`![${e.filename}](${e.externalLink})`);
                                        else img.push(`![${e.filename}](${baseUrl}/o/r/${e.uid})`);
                                    });
                                }
                                if (img)
                                    image += img.map(
                                        (e) => `<img src="${e.replace(imageRegex, "$2")}" alt="${e.replace(imageRegex, "$1")}" />`
                                    ).join("");
                                aplayer = aplayer
                                    ? `<div class="bber-music"><meting-js server="${
                                        aplayer[0].match(/\{\s*music\s*(.*?)\s*\d+\s*\}/)[1]
                                    }" type="song" id="${
                                        aplayer[0].match(/\d+/)[0]
                                    }" mutex="true" preload="none" theme="var(--efu-main)" data-lrctype="0"></meting-js></div>`
                                    : "";
                                video = video
                                    ? `<div class="bber-video"><video src="${
                                        video[0].replace(playerRegex, "$1").trim()
                                    }" controls="controls" style="object-fit: cover;"></video></div>`
                                    : content.match(/{\s*bilibili\s*(.*?)\s*}/g);
                                video = Array.isArray(video)
                                    ? `<div class="bber-video"><iframe src="//player.bilibili.com/player.html?bvid=${
                                        video[0].match(/(BV\w+)/)[1]
                                    }${
                                        video[0].match(/{\s*bilibili\s*(.*?)\s*true\s*}/g) ? "&autoplay=1" : "&autoplay=0"
                                    }" scrolling="no" bozrder="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>`
                                    : "";
                                link = link
                                    ? ((type = link[0].replace(linkRegex, "$2")),
                                    `<a class="bber-content-link" href='${
                                        type.startsWith("/") ? type : type.startsWith("http") ? type : "https://" + type
                                    }' title="${
                                        link[0].replace(linkRegex, "$1") ? link[0].replace(linkRegex, "$1") : "跳转到短文指引的链接"
                                    }" target="_blank"><i class="solitude fa-solid fa-link"></i>链接</a>`)
                                    : "";
                                from = from
                                    ? `<div class="bber-info-from"><span>${from[0].replace(fromRegex, "$1")}</span></div>`
                                    : "";
                                content = content
                                    .replace(contentRegex, "")
                                    .replace(imageRegex, "")
                                    .replace(/\{(.*?)\}/g, "")
                                    .replace(linkRegex, "")
                                    .trim();
                                return `<li class="item">
                                    <div id="bber-content">
                                        ${content ? `<p class="bber-content">${content}</p>` : ""}
                                        ${image ? `<div class="bber-content-img">${image}</div>` : ""}
                                    </div>
                                    ${aplayer}
                                    ${video}
                                    <hr>
                                    <div class="bber-bottom">
                                        <div class="bber-info">
                                            <div class="bber-info-time">
                                                <i class="solitude fa-solid fa-calendar-day"></i>
                                                <time class="datatime" datetime="${time}"></time>
                                            </div>
                                            ${link}
                                            ${from}
                                            ${
                                                item.content.includes("#top")
                                                ? `<div class="bber-info-top"><i class="solitude fa-solid fa-thumbtack"></i>置顶</div>`
                                                : ""
                                            }
                                        </div>
                                        ${
                                            content
                                            ? `<a class="bber-reply" onclick="sco.toTalk('${content}')"><i class="solitude fa-solid fa-comment" style="font-size: 1rem;"></i></a>`
                                            : ""
                                        }
                                    </div>
                                </li>`;
                            }
                    when 2
                        script.
                            async function essayFormat(item, baseUrl) {
                                const contentRegex = /#(.*?)\s|\n/g,
                                    imageRegex = /\!\[(.*?)\]\((.*?)\)/g,
                                    playerRegex = /{\s*player\s*(.*)\s*}/g,
                                    linkRegex = /(?<!\!)\[(.*?)\]\((.*?)\)/g,
                                    topRegex = /#top/g,
                                    fromRegex = /(?<![\w\/])(?<!\{)\{([^{}\s]+)\}(?!\})(?![\w\/])/g;
                                let time = item.displayTime,
                                    content = item.content,
                                    image = "",
                                    img = content.match(imageRegex);
                                (aplayer = content.match(/{\s*music\s*(.*?)\s*(.*?)\s*}/g)),
                                    (video = content.match(playerRegex)),
                                    (link = content.match(linkRegex)),
                                    (type = ""),
                                    (from = content.match(fromRegex));

                                if (item.resources.length) {
                                    if (!img) img = [];
                                    item.resources.forEach((e) => {
                                        if (e.externalLink) img.push(`![${e.filename}](${e.externalLink})`);
                                        else img.push(`![${e.filename}](${baseUrl}/o/r/${e.uid})`);
                                    });
                                }
                                if (img)
                                    image += img
                                    .map(
                                        (e) => `<img src="${e.replace(imageRegex, "$2")}" alt="${e.replace(imageRegex, "$1")}" />`
                                    )
                                    .join("");
                                aplayer = aplayer
                                    ? `<div class="bber-music"><meting-js server="${
                                        aplayer[0].match(/\{\s*music\s*(.*?)\s*\d+\s*\}/)[1]
                                    }" type="song" id="${
                                        aplayer[0].match(/\d+/)[0]
                                    }" mutex="true" preload="none" theme="var(--efu-main)" data-lrctype="0"></meting-js></div>`
                                    : "";
                                video = video
                                    ? `<div class="bber-video"><video src="${video[0]
                                        .replace(playerRegex, "$1")
                                        .trim()}" controls="controls" style="object-fit: cover;"></video></div>`
                                    : content.match(/{\s*bilibili\s*(.*?)\s*}/g);
                                video = Array.isArray(video)
                                    ? `<div class="bber-video"><iframe src="//player.bilibili.com/player.html?bvid=${
                                        video[0].match(/(BV\w+)/)[1]
                                    }${
                                        video[0].match(/{\s*bilibili\s*(.*?)\s*true\s*}/g) ? "&autoplay=1" : "&autoplay=0"
                                    }" scrolling="no" bozrder="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>`
                                    : "";
                                link = link
                                    ? ((type = link[0].replace(linkRegex, "$2")),
                                    `<a class="bber-content-link" href='${
                                        type.startsWith("/") ? type : type.startsWith("http") ? type : "https://" + type
                                    }' target="_blank">${
                                        link[0].replace(linkRegex, "$1")
                                        ? "@" + link[0].replace(linkRegex, "$1")
                                        : "跳转到短文指引的链接"
                                    }</a>`)
                                    : "";
                                from = from
                                    ? `<div class="bber-info-from"><i class="solitude fa-solid fa-hashtag"></i>${
                                    from[0].replace(fromRegex, "$1")
                                    }</div>`
                                    : "";
                                content = content
                                    .replace(contentRegex, "")
                                    .replace(imageRegex, "")
                                    .replace(/\{(.*?)\}/g, "")
                                    .replace(linkRegex, "")
                                    .trim();

                                return `<li class="item">
                                    <div class="meta">
                                        <img class="no-lightbox nolazyload avatar" src="!{theme.aside.card.author.img}">
                                        <div class="info">
                                            <span class="bber_nick">#{config.author}</span>
                                            <time class="datetime bber_date" datetime="${time}"></time>
                                        </div>
                                        ${
                                        content
                                            ? `<a class="bber-reply" onclick="sco.toTalk('${content}')"><i class="solitude fa-solid fa-comment" style="font-size: 1rem;"></i></a>`
                                            : ""
                                        }
                                    </div>
                                    <div id="bber-content">
                                        ${content ? `<p class="bber-content"><span>${content}</span>${link}</p>` : ""}
                                        ${image ? `<div class="bber-content-img">${image}</div>` : ""}
                                    </div>
                                    ${aplayer}
                                    ${video}
                                    <div class="bber-bottom">
                                        <div class="bber-info">
                                            ${
                                            item.content.includes("#top")
                                                ? `<div class="bber-info-top"><i class="solitude fa-solid fa-thumbtack"></i>置顶</div>`
                                                : ""
                                            }
                                            ${from}
                                        </div>
                                    </div>
                                </li>`;
                            }